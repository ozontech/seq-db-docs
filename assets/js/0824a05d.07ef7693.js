"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[145],{3563:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"seq-db/troubleshooting","title":"Troubleshooting","description":"This document provides guidance for troubleshooting common issues with resource usage and performance when working with","source":"@site/docs/seq-db/09-troubleshooting.md","sourceDirName":"seq-db","slug":"/seq-db/troubleshooting","permalink":"/seq-db-docs/seq-db/troubleshooting","draft":false,"unlisted":false,"editUrl":"https://github.com/ozontech/seq-db/tree/main/website/docs/docs/seq-db/09-troubleshooting.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"id":"troubleshooting"},"sidebar":"docs","previous":{"title":"Rate limiting requests","permalink":"/seq-db-docs/seq-db/rate-limiting"},"next":{"title":"Public API","permalink":"/seq-db-docs/seq-db/public-api"}}');var n=t(4848),i=t(8453);const r={id:"troubleshooting"},c="Troubleshooting",a={},d=[{value:"Issue: High Memory Usage",id:"issue-high-memory-usage",level:2},{value:"Reduce Cache Size",id:"reduce-cache-size",level:3},{value:"Adjust Go Runtime Settings",id:"adjust-go-runtime-settings",level:3},{value:"Reduce the frac-size",id:"reduce-the-frac-size",level:3},{value:"Issue: Slow Search Queries",id:"issue-slow-search-queries",level:2},{value:"Issue: Slow Data Ingestion",id:"issue-slow-data-ingestion",level:2}];function l(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"troubleshooting",children:"Troubleshooting"})}),"\n",(0,n.jsx)(s.p,{children:"This document provides guidance for troubleshooting common issues with resource usage and performance when working with\nseq-db."}),"\n",(0,n.jsx)(s.h2,{id:"issue-high-memory-usage",children:"Issue: High Memory Usage"}),"\n",(0,n.jsx)(s.p,{children:"If you notice that seq-db is consuming too much memory, consider the following actions:"}),"\n",(0,n.jsx)(s.h3,{id:"reduce-cache-size",children:"Reduce Cache Size"}),"\n",(0,n.jsxs)(s.p,{children:["seq-db uses a cache to reuse data blocks previously read from disk. Reducing the cache size can help lower overall\nmemory usage. For more details on how caching works, refer to the ",(0,n.jsx)(s.a,{href:"/seq-db-docs/seq-db/internal/cache",children:"cache documentation"}),"."]}),"\n",(0,n.jsx)(s.h3,{id:"adjust-go-runtime-settings",children:"Adjust Go Runtime Settings"}),"\n",(0,n.jsx)(s.p,{children:"The Go runtime uses a garbage collector (GC) to free memory occupied by unused objects. By default, garbage collection\nruns when the heap size doubles from the last GC run. You can configure the GC behavior with the following environment\nvariables:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"GOGC"})})," \u2014 specifies the target memory size after each GC run.\nFor instance, if seq-db typically requires 1 GiB of memory (considering cache, internal buffers, and other resources),\nthen with ",(0,n.jsx)(s.code,{children:"GOGC=100"})," (the default value), memory usage may peak at 2 GiB.\nSee ",(0,n.jsx)(s.a,{href:"https://tip.golang.org/doc/gc-guide#GOGC",children:"GOGC documentation"})," for more details."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"GOMEMLIMIT"})})," \u2014 sets the maximum memory size the application can use. When memory usage approaches this limit,\ngarbage collection will run more frequently.\nFor more details on ",(0,n.jsx)(s.code,{children:"GOMEMLIMIT"}),", refer to ",(0,n.jsx)(s.a,{href:"https://tip.golang.org/doc/gc-guide#Memory_limit",children:"the documentation"}),"."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["These parameters can be used together to optimize memory usage and CPU load. It is recommended to\nreview ",(0,n.jsx)(s.a,{href:"https://tip.golang.org/doc/gc-guide#Memory_limit",children:"this guide"})," to understand how to balance both settings\neffectively."]}),"\n",(0,n.jsx)(s.p,{children:'To monitor the load created by the garbage collector, it\'s helpful to track the seq-db metric "The fraction of CPU time\nused by the GC, %" (todo: \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442). It\u2019s recommended that GC does not use more than 5% of\nCPU time.'}),"\n",(0,n.jsx)(s.h3,{id:"reduce-the-frac-size",children:"Reduce the frac-size"}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"frac-size"})," parameter defines the maximum amount of memory that seq-db will store before sealing the active\nfraction. Reducing this parameter can help lower memory consumption but may increase query times. See more details\nabout ",(0,n.jsx)(s.code,{children:"frac-size"})," in the ",(0,n.jsx)(s.a,{href:"/seq-db-docs/seq-db/flags#data-configuration-flags",children:"configuration documentation"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"issue-slow-search-queries",children:"Issue: Slow Search Queries"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"todo"})}),"\n",(0,n.jsx)(s.h2,{id:"issue-slow-data-ingestion",children:"Issue: Slow Data Ingestion"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"todo"})})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>c});var o=t(6540);const n={},i=o.createContext(n);function r(e){const s=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),o.createElement(i.Provider,{value:s},e.children)}}}]);