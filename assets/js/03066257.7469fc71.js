"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[78],{3542:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"seq-db/internal/format-index-file","title":"Format of Index File of Sealed Fraction","description":"See also","source":"@site/docs/seq-db/internal/format-index-file.md","sourceDirName":"seq-db/internal","slug":"/seq-db/internal/format-index-file","permalink":"/seq-db-docs/seq-db/internal/format-index-file","draft":false,"unlisted":false,"editUrl":"https://github.com/ozontech/seq-db/tree/main/website/docs/docs/seq-db/internal/format-index-file.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Format of Documents File and Meta File","permalink":"/seq-db-docs/seq-db/internal/format-docs-meta-file"},"next":{"title":"Fraction Cache (.frac-cache)","permalink":"/seq-db-docs/seq-db/internal/frac-cache"}}');var t=n(4848),i=n(8453);const r={},l="Format of Index File of Sealed Fraction",c={},d=[{value:"See also",id:"see-also",level:2},{value:"High level structure",id:"high-level-structure",level:2},{value:"DataBlocks structure",id:"datablocks-structure",level:2},{value:"BlocksRegistry block structure",id:"blocksregistry-block-structure",level:2},{value:"Format of IndexBlockHeader",id:"format-of-indexblockheader",level:3}];function a(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"format-of-index-file-of-sealed-fraction",children:"Format of Index File of Sealed Fraction"})}),"\n",(0,t.jsx)(s.h2,{id:"see-also",children:"See also"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/seq-db-docs/seq-db/internal/fractions",children:"Fractions"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"/seq-db-docs/seq-db/internal/format-docs-meta-file",children:"Format of Documents and Metadata File"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.strong,{children:"Format of Index File of Sealed Fraction"})}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Index file is a part of fraction data. It has *.index extention and contains index of documents from *.docs file."}),"\n",(0,t.jsx)(s.h2,{id:"high-level-structure",children:"High level structure"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"8"})," first bytes - Offset of ",(0,t.jsx)(s.strong,{children:"BlocksRegistry"})," block from the begining of file (",(0,t.jsx)(s.strong,{children:"= N + 16"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"8"})," next bytes - Size of ",(0,t.jsx)(s.strong,{children:"BlocksRegistry"})," block (",(0,t.jsx)(s.strong,{children:"= K"}),")"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"N"})," next bytes - Section of ",(0,t.jsx)(s.strong,{children:"DataBlocks"})," - a series of different data blocks"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"K"})," next bytes - Section of ",(0,t.jsx)(s.strong,{children:"BlocksRegistry"})," block - and index of blocks (offsets, sizes, etc.) in ",(0,t.jsx)(s.strong,{children:"DataBlocks"})," section"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["This order of sections is determined by the way of writing: each time we write ",(0,t.jsx)(s.strong,{children:"DataBlock"}),' on disk we "remember" position, size and possibly other metadata.\nThen, after all ',(0,t.jsx)(s.strong,{children:"DataBlocks"})," have been written, we write that blocks metadata to the ",(0,t.jsx)(s.strong,{children:"BlocksRegistry"})," section at the end of the file."]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"img.png",src:n(981).A+"",width:"343",height:"325"})}),"\n",(0,t.jsx)(s.h2,{id:"datablocks-structure",children:"DataBlocks structure"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"DataBlocks"})," consist of 6 sections:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Section with one ",(0,t.jsx)(s.strong,{children:"InfoBlock"})," (see ",(0,t.jsx)(s.code,{children:"DiskInfoBlock.pack()"}),") contains stats data of fraction in json format."]}),"\n",(0,t.jsxs)(s.li,{children:["Section with several ",(0,t.jsx)(s.strong,{children:"TokensBlocks"})," (see ",(0,t.jsx)(s.code,{children:"DiskTokensBlock.pack()"})," method). Contains a list of sorted tokens."]}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.strong,{children:"EmptyBlock"})}),"\n",(0,t.jsxs)(s.li,{children:["Section with several ",(0,t.jsx)(s.strong,{children:"TokenTablesBlocks"})," (see ",(0,t.jsx)(s.code,{children:"DiskTokenTableBlock.pack()"})," method). Contains an index for ",(0,t.jsx)(s.strong,{children:"TokensBlocks"}),"."]}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.strong,{children:"EmptyBlock"})}),"\n",(0,t.jsxs)(s.li,{children:["Section with one ",(0,t.jsx)(s.strong,{children:"PositionsBlock"})," (see ",(0,t.jsx)(s.code,{children:"DiskPositionsBlock.pack()"})," method). Contains an index of DocBlocks in  *.docs file, i.e. a list with position of each ",(0,t.jsx)(s.strong,{children:"DocumentBlock"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:["Section with several ",(0,t.jsx)(s.strong,{children:"IDsBlocks"})," (see ",(0,t.jsx)(s.code,{children:"DiskIDsBlock.pack()"})," method). Physically, each ",(0,t.jsx)(s.strong,{children:"IDsBlock"})," represents 3 blocks:","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"MIDsBlock"})," - just list of MIDs"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"RIDsBlock"})," - just list of RIDs"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"PosBlock"})," - position of documents. Each position is a ",(0,t.jsx)(s.em,{children:"uint64"})," where first 34 bits is index of block (from PositionsBlock) and the rest of 30 bits it is position of document (byte offset) inside ",(0,t.jsx)(s.strong,{children:"DocumentBlock"})," in *.docs file"]}),"\n"]}),"\n","For each block type (",(0,t.jsx)(s.strong,{children:"MIDsBlock"}),", ",(0,t.jsx)(s.strong,{children:"RIDsBlock"}),", ",(0,t.jsx)(s.strong,{children:"PosBlock"}),") we have the same ID order. Thus, for each triple, the values in the same positions correspond to the same ID."]}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.strong,{children:"EmptyBlock"})}),"\n",(0,t.jsxs)(s.li,{children:["Section with several ",(0,t.jsx)(s.strong,{children:"LIDsBlocks"})," (see ",(0,t.jsx)(s.code,{children:"DiskLIDsBlock.pack()"})," method) - a list of LIDs sorted by fields, tokens, MIDs and RIDs. In ",(0,t.jsx)(s.strong,{children:"BlocksRegistry"})," we store the ",(0,t.jsx)(s.em,{children:"range of TIDs"})," for each ",(0,t.jsx)(s.strong,{children:"LIDsBlocks"})," so we can easily find desired block."]}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.strong,{children:"EmptyBlock"})}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{alt:"img.png",src:n(5053).A+"",width:"429",height:"569"})}),"\n",(0,t.jsx)(s.h2,{id:"blocksregistry-block-structure",children:"BlocksRegistry block structure"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"BlocksRegistry"})," block is a series of fixed-size structuries called ",(0,t.jsx)(s.strong,{children:"IndexBlockHeader"}),".\nEach ",(0,t.jsx)(s.strong,{children:"DataBlock"})," corresponds to one of the ",(0,t.jsx)(s.strong,{children:"IndexBlockHeader"}),".\nThe order of the ",(0,t.jsx)(s.strong,{children:"DataBlocks"})," is the same as the order of the corresponding ",(0,t.jsx)(s.strong,{children:"IndexBlockHeader"}),"s."]}),"\n",(0,t.jsxs)(s.p,{children:["There are also an ",(0,t.jsx)(s.em,{children:"empty"})," ",(0,t.jsx)(s.strong,{children:"BlocksRegistryEntries"}),". Such ",(0,t.jsx)(s.strong,{children:"EmptyBlocks"})," do not have corresponding ",(0,t.jsx)(s.strong,{children:"DataBlock"})," and are used to separate logical groups of ",(0,t.jsx)(s.strong,{children:"DataBlocks"})," from each other."]}),"\n",(0,t.jsx)(s.h3,{id:"format-of-indexblockheader",children:"Format of IndexBlockHeader"}),"\n",(0,t.jsxs)(s.p,{children:["See ",(0,t.jsx)(s.code,{children:"disk/blocks_registry_entry.go"})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-go",children:"// Format: C : LLLL : UUUU : EEEE-EEEE-EEEE-EEEE : PPPP-PPPP\n// C -  1 \u2013 Codec\n// L -  4 \u2013 Length\n// U -  4 - Length after uncompress\n// E - 16 - Extensions/flags\n// P -  8 - Position\n// ------------------\n// Total: 33 bytes\n"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Extensions/flags"})," part of ",(0,t.jsx)(s.strong,{children:"IndexBlockHeader"})," is intended to help find a desired block in the ",(0,t.jsx)(s.strong,{children:"BlocksRegistry"})," index. So we store in this fields:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["the ",(0,t.jsx)(s.em,{children:"range of TIDs"})," for each ",(0,t.jsx)(s.strong,{children:"LIDsBlocks"}),". This allows us to choose the appropriate LID block for a particular token."]}),"\n",(0,t.jsxs)(s.li,{children:["the ",(0,t.jsx)(s.em,{children:"minimal MID and RID"})," for each ",(0,t.jsx)(s.strong,{children:"MIDsBlock"}),". This allows us to choose the appropriate Pos block for a particular MID and RID."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Empty IndexBlockHeader is just 33 zero bytes."})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},5053:(e,s,n)=>{n.d(s,{A:()=>o});const o=n.p+"assets/images/data-blocks-d50177fe5aaa00675cec59f134a3dd45.png"},981:(e,s,n)=>{n.d(s,{A:()=>o});const o=n.p+"assets/images/high-level-391319fdb985338f2dbfc11e6bed1dd8.png"},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>l});var o=n(6540);const t={},i=o.createContext(t);function r(e){const s=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(i.Provider,{value:s},e.children)}}}]);