"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[812],{7018:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"seq-db/internal/common","title":"Basic moments","description":"Common","source":"@site/docs/seq-db/internal/common.md","sourceDirName":"seq-db/internal","slug":"/seq-db/internal/common","permalink":"/seq-db-docs/seq-db/internal/common","draft":false,"unlisted":false,"editUrl":"https://github.com/ozontech/seq-db/tree/main/website/docs/docs/seq-db/internal/common.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Cache overview","permalink":"/seq-db-docs/seq-db/internal/cache"},"next":{"title":"Debug server","permalink":"/seq-db-docs/seq-db/internal/debug-server"}}');var r=i(4848),o=i(8453);const t={},l="Basic moments",c={},d=[{value:"Common",id:"common",level:2},{value:"Bulk",id:"bulk",level:3},{value:"Bulk in Ingestor",id:"bulk-in-ingestor",level:2},{value:"Bulk in Store",id:"bulk-in-store",level:2},{value:"Fetch",id:"fetch",level:3},{value:"Fetch in Ingestor",id:"fetch-in-ingestor",level:2},{value:"Fetch in Store",id:"fetch-in-store",level:2},{value:"Search",id:"search",level:3},{value:"Fraction",id:"fraction",level:3},{value:"Sealing",id:"sealing",level:2}];function a(e){const n={em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"basic-moments",children:"Basic moments"})}),"\n",(0,r.jsx)(n.h2,{id:"common",children:"Common"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ID: MID-RID ."}),"\n",(0,r.jsx)(n.li,{children:"MID - milliseconds part of ID, generated (extracted from doc) by ingestor before sending to store."}),"\n",(0,r.jsx)(n.li,{children:"RID - random part of ID, generated by ingestor before sending to store."}),"\n",(0,r.jsx)(n.li,{children:"docParam - link of ID and block position, position of doc in block."}),"\n",(0,r.jsx)(n.li,{children:"Only active fraction has meta file. It is used for restoring index in memory and in process of sealing fraction it is used to form index file."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"bulk",children:"Bulk"}),"\n",(0,r.jsx)(n.h2,{id:"bulk-in-ingestor",children:"Bulk in Ingestor"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Max amount of inflight queries - IngestorMaxInflightBulks."}),"\n",(0,r.jsx)(n.li,{children:"Each query uses bulk object from pool, which size is IngestorMaxInflightBulks."}),"\n",(0,r.jsx)(n.li,{children:"Bulk object consists from doc provider, which contains own map for speed up lz4 compression."}),"\n",(0,r.jsx)(n.li,{children:"DocProvider parses input data from query and form docs and metas (parseBulk)."}),"\n",(0,r.jsx)(n.li,{children:"DocProvider compresses all doc in one block. The same is done for metas."}),"\n",(0,r.jsx)(n.li,{children:"Send data to hot store, then to cold stores. Store replicaSet is selected by bulkTryCount.Inc() % len(replicaSets)."}),"\n",(0,r.jsx)(n.li,{children:"Data is sent to each replica in replicaSet."}),"\n",(0,r.jsx)(n.li,{children:"If at least one replica returned an error, the next replicaSet will be selected."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"bulk-in-store",children:"Bulk in Store"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Check number of active requests - inflightBulks."}),"\n",(0,r.jsx)(n.li,{children:"Choose active fraction."}),"\n",(0,r.jsx)(n.li,{children:"Send data to WriteWorkers and IndexWorkers."}),"\n",(0,r.jsx)(n.li,{children:"In write worker wait for 16 requests for writing."}),"\n",(0,r.jsx)(n.li,{children:"In write worker write docs and metas to separate files for all write requests."}),"\n",(0,r.jsx)(n.li,{children:"Do fsync."}),"\n",(0,r.jsx)(n.li,{children:"Update stats (DocsOnDisk, MetaOnDisk)."}),"\n",(0,r.jsx)(n.li,{children:"For index worker set position of block of docs in file."}),"\n",(0,r.jsx)(n.li,{children:"Waiting the end of the work for only writeWorker (WriteTask). In case of reloading(stopping) store, index of docs will be restored (ReplayBlocks)."}),"\n",(0,r.jsxs)(n.li,{children:["In index worker parse metas, form index and store link of block position and ID ( ",(0,r.jsx)(n.em,{children:"docParam"}),") (appendWorker)."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"fetch",children:"Fetch"}),"\n",(0,r.jsx)(n.h2,{id:"fetch-in-ingestor",children:"Fetch in Ingestor"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Check id in hot. In case of error or lack of data in hot, fetch data from cold stores."}),"\n",(0,r.jsx)(n.li,{children:"Cancel other simultaneous requests in success case."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"fetch-in-store",children:"Fetch in Store"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"In case of single id and hot store, compare ID.MID and OldestMID on store. If Id.MID is older, returns error."}),"\n",(0,r.jsx)(n.li,{children:"Form FetchTask with pointers to fraction and id/ids."}),"\n",(0,r.jsx)(n.li,{children:"In fetchWorker try to fetch doc by each ids."}),"\n",(0,r.jsx)(n.li,{children:"In fetchOne extracts MID from ID and selects consistently suitable fraction, check fraction.IsIntersects."}),"\n",(0,r.jsxs)(n.li,{children:["If fraction (active or sealed) is suitable, find ",(0,r.jsx)(n.em,{children:"docParam"})," by ID, decode block position and position of doc in block from ",(0,r.jsx)(n.em,{children:"docParam"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Read block, decompress it, returns doc's content and don't start check next fraction."}),"\n",(0,r.jsx)(n.li,{children:"if the document was found, forms disk.DocBlock with ID, length and uncompressed data. Otherwise, form block with zero length."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"TODO:"}),"\n",(0,r.jsx)(n.h3,{id:"search",children:"Search"}),"\n",(0,r.jsx)(n.h3,{id:"fraction",children:"Fraction"}),"\n",(0,r.jsx)(n.h2,{id:"sealing",children:"Sealing"})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>l});var s=i(6540);const r={},o=s.createContext(r);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);