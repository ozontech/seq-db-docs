"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[715],{1431:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"seq-db/index-types","title":"Index types and mappings","description":"seq-db doesn\'t index any fields from the ingested data by default.","source":"@site/docs/seq-db/03-index-types.md","sourceDirName":"seq-db","slug":"/seq-db/index-types","permalink":"/seq-db-docs/seq-db/index-types","draft":false,"unlisted":false,"editUrl":"https://github.com/ozontech/seq-db/tree/main/website/docs/docs/seq-db/03-index-types.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"index-types"},"sidebar":"docs","previous":{"title":"Flags","permalink":"/seq-db-docs/seq-db/flags"},"next":{"title":"seq-ql","permalink":"/seq-db-docs/seq-db/seq-ql"}}');var t=i(4848),d=i(8453);const l={id:"index-types"},a="Index types and mappings",r={},o=[{value:"Index types",id:"index-types",level:2},{value:"<code>keyword</code> mapping type",id:"keyword-mapping-type",level:3},{value:"<code>path</code> mapping type",id:"path-mapping-type",level:3},{value:"<code>text</code> mapping type",id:"text-mapping-type",level:3},{value:"<code>exists</code> mapping type",id:"exists-mapping-type",level:3},{value:"Configuration parameters",id:"configuration-parameters",level:2},{value:"Object indexing",id:"object-indexing",level:2},{value:"Field names containing dots and nested objects",id:"field-names-containing-dots-and-nested-objects",level:3},{value:"Multiple indexes on a single field",id:"multiple-indexes-on-a-single-field",level:2},{value:"Illustrated mapping example",id:"illustrated-mapping-example",level:2},{value:"Indexing internals",id:"indexing-internals",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"index-types-and-mappings",children:"Index types and mappings"})}),"\n",(0,t.jsxs)(n.p,{children:["seq-db doesn't index any fields from the ingested data by default.\nInstead, indexing is controlled through a special file called the ",(0,t.jsx)(n.em,{children:"mapping file"}),".\nThe mapping file specifies the indexed fields and the used index types."]}),"\n",(0,t.jsx)(n.h2,{id:"index-types",children:"Index types"}),"\n",(0,t.jsx)(n.p,{children:"Below is a description of mapping types seq-db currently supports. There are several index types with different behaviors."}),"\n",(0,t.jsxs)(n.h3,{id:"keyword-mapping-type",children:[(0,t.jsx)(n.code,{children:"keyword"})," mapping type"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"keyword"})," mapping type treats the whole value as a single token, without breaking it up.\nUsually used for content like statuses, namespaces, tags or any other data where a full match search is required.\nNote that ",(0,t.jsx)(n.code,{children:"keyword"})," index should be used with care with high-cardinality values like ",(0,t.jsx)(n.code,{children:"trace_id"}),", ",(0,t.jsx)(n.code,{children:"span_id"})," or\nother unique request identifiers, as the indexing of these fields might blow up the index."]}),"\n",(0,t.jsx)(n.p,{children:"Example of a mapping for a keyword field:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"mapping-list:\n  - name: level\n    type: keyword\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"path-mapping-type",children:[(0,t.jsx)(n.code,{children:"path"})," mapping type"]}),"\n",(0,t.jsxs)(n.p,{children:["This mapping type indexes hierarchical path-like values.\nIt is very similar to the\nelasticsearch's ",(0,t.jsx)(n.a,{href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pathhierarchy-tokenizer.html",children:"path tokenizer"}),".\nWhen a field is indexed with the ",(0,t.jsx)(n.code,{children:"path"})," index, its value is broken\ninto hierarchical terms."]}),"\n",(0,t.jsxs)(n.p,{children:["Used for searching by beginning of a path or full path. For example, the following documents will match query ",(0,t.jsx)(n.code,{children:'uri:"/my/path"'}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'[\n  {"uri": "/my/path"},\n  {"uri": "/my/path/1"},\n  {"uri": "/my/path/1/"},\n  {"uri": "/my/path/1/one"}\n]\n'})}),"\n",(0,t.jsx)(n.p,{children:"Example of a mapping for a path field:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"mapping-list:\n  - name: uri\n    type: path\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"text-mapping-type",children:[(0,t.jsx)(n.code,{children:"text"})," mapping type"]}),"\n",(0,t.jsx)(n.p,{children:"Index for content like error messages or request bodies where full-text search is required.\nThis mapping type is used to index fields containing unstructured, natural language text, as well as human-written messages, descriptions,\nerror messages and other free-text fields."}),"\n",(0,t.jsxs)(n.p,{children:["For example, the search query ",(0,t.jsx)(n.code,{children:'message:"error"'})," will emit all the documents that contain token ",(0,t.jsx)(n.code,{children:"error"}),". And query ",(0,t.jsx)(n.code,{children:'message:"error code"'})," will emit all the documents that contain both ",(0,t.jsx)(n.code,{children:"error"})," and ",(0,t.jsx)(n.code,{children:"code"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Example of a mapping for a text field:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"mapping-list:\n  - name: message\n    type: text\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"exists-mapping-type",children:[(0,t.jsx)(n.code,{children:"exists"})," mapping type"]}),"\n",(0,t.jsx)(n.p,{children:"Used when the presence of the field is important and not the value."}),"\n",(0,t.jsxs)(n.p,{children:["This mapping type should be used when a field might or might not be\npresent in a message.\nFor example, for query ",(0,t.jsx)(n.code,{children:"_exists_:service"})," all documents that have a ",(0,t.jsx)(n.code,{children:"service"})," field will be found regardless of the field value."]}),"\n",(0,t.jsxs)(n.p,{children:["Note that the ",(0,t.jsx)(n.code,{children:"_exists_"})," query will work on other types of mapping as well."]}),"\n",(0,t.jsx)(n.p,{children:"Example of a mapping for an exists field:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"mapping-list:\n  - name: service\n    type: exists\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configuration-parameters",children:"Configuration parameters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--partial-indexing"})," - if true, will index only the first part of long fields, otherwise will skip entry if length of field value is greater than threshold."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--max-token-size"})," - max size of a single token, default is 72."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"--case-sensitive"})," - if false, will convert values to lower case."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["constant ",(0,t.jsx)(n.code,{children:"consts.MaxTextFieldValueLength"})," - limits maximum length of the text field value. Current threshold is 32768 bytes."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"object-indexing",children:"Object indexing"}),"\n",(0,t.jsxs)(n.p,{children:["seq-db can also index logs containing nested structured data.\nIn this case, the parent field should have the ",(0,t.jsx)(n.code,{children:"object"})," index type,\nand contain a ",(0,t.jsx)(n.code,{children:"mapping-list"})," object inside, that would specify\nhow exactly its nested fields should be indexed."]}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'mapping-list:\n  - name: "myobject" # key that contains nested json data\n    type: "object"\n    mapping-list: # mapping for the nested fields\n      - type: "keyword"\n        name: "nested"\n      - type: "text"\n        name: "nestedtext"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"field-names-containing-dots-and-nested-objects",children:"Field names containing dots and nested objects"}),"\n",(0,t.jsxs)(n.p,{children:["seq-db doesn't differentiate between fields indexed\nin a nested object and fields containing a dot in their name.\nFor example, the mapping displayed below, will index both ",(0,t.jsx)(n.code,{children:"name"}),"\nkeys nested inside the object with the key ",(0,t.jsx)(n.code,{children:"user"}),", and the ",(0,t.jsx)(n.code,{children:"user.name"})," field\ninside the root log."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"mapping-list:\n  - name: user\n    type: object\n    mapping-list:\n      - type: keyword\n        name: name\n  - user.name: keyword\n"})}),"\n",(0,t.jsx)(n.h2,{id:"multiple-indexes-on-a-single-field",children:"Multiple indexes on a single field"}),"\n",(0,t.jsx)(n.p,{children:"A single field can be indexed with multiple types at the same time.\nThis allows to combine multiple indexing strategies enabling more flexible\nsearch capabilities."}),"\n",(0,t.jsxs)(n.p,{children:["For instance, a field can be indexed as both ",(0,t.jsx)(n.code,{children:"keyword"})," and ",(0,t.jsx)(n.code,{children:"text"}),",\nallowing both full-text search and exact filtering."]}),"\n",(0,t.jsx)(n.p,{children:"If multiple indexing types are used, the additional indexing\ntype should have titles, that will be used during data search.\nSay we have this mapping:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"mapping-list:\n    - name: message\n      types:\n      - type: text\n      - title: keyword\n        type: keyword\n        size: 18\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this case, the type with empty ",(0,t.jsx)(n.code,{children:"title"})," will be default one."]}),"\n",(0,t.jsxs)(n.p,{children:["For types with ",(0,t.jsx)(n.code,{children:"title"}),' new "implicit" fields will be created: ',(0,t.jsx)(n.code,{children:"message.keyword"})," in our case. Use ",(0,t.jsx)(n.code,{children:"message.keyword"})," to search over message as keyword and ",(0,t.jsx)(n.code,{children:"message"})," to search as text."]}),"\n",(0,t.jsxs)(n.p,{children:["The title of implicit field consists of values of ",(0,t.jsx)(n.code,{children:"name"})," and ",(0,t.jsx)(n.code,{children:"title"})," joined together with a dot between them."]}),"\n",(0,t.jsx)(n.h2,{id:"illustrated-mapping-example",children:"Illustrated mapping example"}),"\n",(0,t.jsx)(n.p,{children:"Let's walk through a practical example.\nWe'll define a mapping and analyze how seq-db would index a sample document."}),"\n",(0,t.jsxs)(n.p,{children:["Say we have this example mapping with explicit field types: ",(0,t.jsx)(n.code,{children:"text"}),", ",(0,t.jsx)(n.code,{children:"keyword"}),", ",(0,t.jsx)(n.code,{children:"path"}),", ",(0,t.jsx)(n.code,{children:"exists"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"mapping-list:\n    - name: message\n      types:\n      - type: text\n      - title: keyword\n        type: keyword\n        size: 18\n    - name: level\n      type: keyword\n    - name: foo\n      type: exists\n    - name: bar\n      type: keyword\n    - name: uri\n      type: path\n"})}),"\n",(0,t.jsxs)(n.p,{children:["There is also a ",(0,t.jsx)(n.code,{children:"size"})," field that allows you to specify the maximum size of the input data."]}),"\n",(0,t.jsxs)(n.p,{children:["If ",(0,t.jsx)(n.code,{children:"size"})," is not set, the ",(0,t.jsx)(n.a,{href:"#configuration-parameters",children:"default"})," will be used."]}),"\n",(0,t.jsx)(n.h2,{id:"indexing-internals",children:"Indexing internals"}),"\n",(0,t.jsxs)(n.p,{children:["Let's write a document using ",(0,t.jsx)(n.a,{href:"#illustrated-mapping-example",children:"mapping"})," (ID of document will be ",(0,t.jsx)(n.code,{children:"id = N"}),"):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "message": "hello world",\n    "some_number": 1,\n    "level": "info",\n    "foo": "aaa bbb ccc",\n    "bar": "ddd eee fff",\n    "uri": "/my/path"\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Following metadata will be created:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    id: N,\n    tokens: [\n        "_exists_:message",\n        "message:hello",\n        "message:world",\n        "_exists_:message.keyword",\n        "message.keyword:hello world",\n        "_exists_:level",\n        "level:info",\n        "_exists_:foo",\n        "_exists_:bar",\n        "bar:ddd eee fff",\n        "_exists_:uri",\n        "uri:/my",\n        "uri:/my/path",\n    ]\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Note that:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["There are additional ",(0,t.jsx)(n.code,{children:"_exists_"})," tokens for each field."]}),"\n",(0,t.jsxs)(n.li,{children:["There are tokens for ",(0,t.jsx)(n.code,{children:"message.keyword"}),' field, which wasn\'t present in the original document, but was in mapping as "implicit" type for ',(0,t.jsx)(n.code,{children:"message"})," field."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"foo"})," field has only ",(0,t.jsx)(n.code,{children:"_exists_"})," token."]}),"\n",(0,t.jsxs)(n.li,{children:["Data in the ",(0,t.jsx)(n.code,{children:"bar"})," field indexed as single token because it is ",(0,t.jsx)(n.code,{children:"keyword"})," field."]}),"\n",(0,t.jsxs)(n.li,{children:["There are multiple tokens for ",(0,t.jsx)(n.code,{children:"uri"})," field, a token for each segment of the path."]}),"\n",(0,t.jsxs)(n.li,{children:["Field ",(0,t.jsx)(n.code,{children:"some_number"})," is not indexed, because it is not in the mapping."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var s=i(6540);const t={},d=s.createContext(t);function l(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);